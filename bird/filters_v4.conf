function bgp_in_all()
	prefix set martians;
	prefix set protected_networks;
	prefix set rejects;
{
	martians = [
		0.0.0.0/8+,
#		10.0.0.0/8+,
#		100.64.0.0/10+,
		127.0.0.0/8+,
		169.254.0.0/16+,
#		172.16.0.0/12+,
#		192.0.0.0/29+,
		192.0.2.0/24+,
#		192.168.0.0/16+,
		198.18.0.0/15+,
		198.51.100.0/24+,
		203.0.113.0/24+,
		224.0.0.0/4+,
		240.0.0.0/4+,
		255.255.255.255/32
	];

	protected_networks = [
		# private network
		10.42.16.0/20+,

		# must use default route
		85.10.240.248/29{0,32},
		46.4.126.77/32{0,32},
		46.37.189.136/31{0,32},
		128.199.243.248/32{0,32}
	];

	rejects = [
		# ChaosVPN host routes
		172.31.0.0/16{32,32},

		# Freifunk host routes
		10.0.0.0/8{32,32}
	];

	if (net.len = 0) then {
		print proto, ": Default route rejected";
		return false;
	}

	if (!(net.len ~ [8..32])) then {
		print proto, ": Prefix length rejected";
		return false;
	}

	if (net ~ martians) then {
		print proto, ": Martian prefix rejected";
		return false;
	}

	if (net ~ protected_networks) then {
		print proto, ": Protected prefix rejected";
		return false;
	}

	if (net ~ rejects) then {
		print proto, ": Unwanted prefix rejected";
		return false;
	}

	if (bgp_path.len > 0) then {
		case (roa_check(dn42)) {
			ROA_VALID:
				print proto, ": ROA validated for ", net, " from AS", bgp_path.last;
			ROA_INVALID:
				print proto, ": ROA validation failed for ", net, " from AS", bgp_path.last;
#				return false;
		}
	}

#	if (bgp_path.len > 45) then {
#		print proto, ": AS_PATH too long";
#		return false;
#	}

	accept;
}

function bgp_in_asn(int PeerASN) {
#	case (PeerASN) {
#		4242422342, 4242420123:
#			if (bgp_path.last != PeerASN) then {
#				print proto, ": Transit route from AS", bgp_path.last, " rejected";
#				return false;
#			}
#	}

	return bgp_in_all();
}


function bgp_out_all()
{
#	if (net ~ no_export_nets) then {
#		bgp_community.add((65535, 65281)); # no-export
#	}

	if (net ~ no_advertise_nets) then {
		bgp_community.add((65535, 65282)); # no-advertise
	}

	if (source = RTS_BGP) then {
		# routes learned from iBGP peers
		if (proto ~ "dn42_ibgp_*") then {
			# prefer direct peer if possible
			bgp_med = 200;
			if (bgp_path.last = my_as) then {
				bgp_path.prepend(my_as);
			}
		}
		return true;
	}

	if (source ~ [RTS_STATIC, RTS_STATIC_DEVICE]) then {
		return true;
	}

	return false;
}

function bgp_out_asn(int PeerASN) {
	if (!bgp_out_all()) then {
		return false;
	}

	# increase transit cost - except for Haegar
#	if (!(PeerASN ~ [my_as, 64654] || bgp_path.last ~ [my_as, 64654])) then {
#		bgp_path.prepend(my_as);
#		bgp_path.prepend(my_as);
#	}

#	case (PeerASN) {
#		4242422342, 4242420123:
#			if (bgp_path.last != my_as) then {
#				return false;
#			}
#		64654:
#			bgp_med = 0;
#	}

	return true;
}
